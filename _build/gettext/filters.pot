# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, 日本Pandocユーザ会
# This file is distributed under the same license as the 日本Pandocユーザ会 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 日本Pandocユーザ会 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-31 10:15+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../filters.rst:4
msgid "Pandoc filters 日本語版"
msgstr ""

#: ../../filters.rst:8
msgid "現在の翻訳は *プレリリース版* です。不完全な翻訳を含んでいます。 （ユーザーズガイド以外のページについてはほぼ翻訳されていません。現在翻訳を進めています）"
msgstr ""

#: ../../filters.rst:11
msgid "正確な情報については英語の公式 `User's Guide <https://pandoc.org/MANUAL.html>`_ を参照してください"
msgstr ""

#: ../../filters.rst:12
msgid "この翻訳に対する問題・改善案については `GitHubリポジトリのIssue <https://github.com/pandoc-jp/pandoc-doc-ja/issues>`_ に投稿してください"
msgstr ""

#: ../../filters.rst:13
msgid "翻訳のレビュー作業や翻訳作業へのご協力を希望の方は :doc:`trans-intro` をご覧ください"
msgstr ""

#: ../../filters.rst:15
msgid "原著者:"
msgstr ""

#: ../../filters.rst:17
msgid "John MacFarlane"
msgstr ""

#: ../../filters.rst:19
msgid "原著バージョン: 2.11.0.4"
msgstr ""

#: ../../filters.rst:21
msgid "更新日: 2020/10/31"
msgstr ""

#: ../../filters.rst:23
msgid "翻訳者（アルファベット順）:"
msgstr ""

#: ../../filters.rst:25
msgid "becolomochi"
msgstr ""

#: ../../filters.rst:26
msgid "makotosan"
msgstr ""

#: ../../filters.rst:27
msgid "niszet"
msgstr ""

#: ../../filters.rst:28
msgid "Takada Atsushi"
msgstr ""

#: ../../filters.rst:29
msgid "`Tomoki Ishibashi <https://ishibaki.github.io>`_"
msgstr ""

#: ../../filters.rst:30
msgid "Yuki Fujiwara"
msgstr ""

#: ../../filters.rst:33
msgid "目次"
msgstr ""

#: ../../filters.rst:36
msgid "Summary"
msgstr ""

#: ../../filters.rst:38
msgid "Pandoc provides an interface for users to write programs (known as filters) which act on pandoc’s AST."
msgstr ""

#: ../../filters.rst:41
msgid "Pandoc consists of a set of readers and writers. When converting a document from one format to another, text is parsed by a reader into pandoc’s intermediate representation of the document—an “abstract syntax tree” or AST—which is then converted by the writer into the target format. The pandoc AST format is defined in the module ```Text.Pandoc.Definition`` in the ``pandoc-types`` package`_."
msgstr ""

#: ../../filters.rst:48
msgid "A “filter” is a program that modifies the AST, between the reader and the writer."
msgstr ""

#: ../../filters.rst:55
msgid "Pandoc supports two kinds of filters:"
msgstr ""

#: ../../filters.rst:57
msgid "**Lua filters** use the Lua language to define transformations on the pandoc AST. They are described in a `separate document`_."
msgstr ""

#: ../../filters.rst:60
msgid "**JSON filters**, described here, are pipes that read from standard input and write to standard output, consuming and producing a JSON representation of the pandoc AST:"
msgstr ""

#: ../../filters.rst:80
msgid "Lua filters have a couple of advantages. They use a Lua interpreter that is embedded in pandoc, so you don’t need to have any external software installed. And they are usually faster than JSON filters. But if you wish to write your filter in a language other than Lua, you may prefer to use a JSON filter. JSON filters may be written in any programming language."
msgstr ""

#: ../../filters.rst:87
msgid "You can use a JSON filter directly in a pipeline:"
msgstr ""

#: ../../filters.rst:95
msgid "But it is more convenient to use the ``--filter`` option, which handles the plumbing automatically:"
msgstr ""

#: ../../filters.rst:102
msgid "For a gentle introduction into writing your own filters, continue this guide. There’s also a `list of third party filters on the wiki`_."
msgstr ""

#: ../../filters.rst:106
msgid "A simple example"
msgstr ""

#: ../../filters.rst:108
msgid "Suppose you wanted to replace all level 2+ headings in a markdown document with regular paragraphs, with text in italics. How would you go about doing this?"
msgstr ""

#: ../../filters.rst:112
msgid "A first thought would be to use regular expressions. Something like this:"
msgstr ""

#: ../../filters.rst:119
msgid "This should work most of the time. But don’t forget that ATX style headings can end with a sequence of ``#``\\ s that is not part of the heading text:"
msgstr ""

#: ../../filters.rst:127
msgid "And what if your document contains a line starting with ``##`` in an HTML comment or delimited code block?"
msgstr ""

#: ../../filters.rst:140
msgid "We don’t want to touch *these* lines. Moreover, what about Setext style second-level heading?"
msgstr ""

#: ../../filters.rst:148
msgid "We need to handle those too. Finally, can we be sure that adding asterisks to each side of our string will put it in italics? What if the string already contains asterisks around it? Then we’ll end up with bold text, which is not what we want. And what if it contains a regular unescaped asterisk?"
msgstr ""

#: ../../filters.rst:154
msgid "How would you modify your regular expression to handle these cases? It would be hairy, to say the least."
msgstr ""

#: ../../filters.rst:157
msgid "A better approach is to let pandoc handle the parsing, and then modify the AST before the document is written. For this, we can use a filter."
msgstr ""

#: ../../filters.rst:160
msgid "To see what sort of AST is produced when pandoc parses our text, we can use pandoc’s ``native`` output format:"
msgstr ""

#: ../../filters.rst:174
msgid "A ``Pandoc`` document consists of a ``Meta`` block (containing metadata like title, authors, and date) and a list of ``Block`` elements. In this case, we have two ``Block``\\ s, a ``Header`` and a ``Para``. Each has as its content a list of ``Inline`` elements. For more details on the pandoc AST, see the `haddock documentation for ``Text.Pandoc.Definition```_."
msgstr ""

#: ../../filters.rst:181
msgid "We can use Haskell to create a JSON filter that transforms this AST, replacing each ``Header`` block with level >= 2 with a ``Para`` with its contents wrapped inside an ``Emph`` inline:"
msgstr ""

#: ../../filters.rst:198
msgid "The ``toJSONFilter`` function does two things. First, it lifts the ``behead`` function (which maps ``Block -> Block``) onto a transformation of the entire ``Pandoc`` AST, walking the AST and transforming each block. Second, it wraps this ``Pandoc -> Pandoc`` transformation with the necessary JSON serialization and deserialization, producing an executable that consumes JSON from stdin and produces JSON to stdout."
msgstr ""

#: ../../filters.rst:206
msgid "To use the filter, make it executable:"
msgstr ""

#: ../../filters.rst:212
msgid "and then"
msgstr ""

#: ../../filters.rst:218
msgid "(It is also necessary that ``pandoc-types`` be installed in the local package repository. To do this using cabal-install, ``cabal v2-update && cabal v2-install --lib pandoc-types``.)"
msgstr ""

#: ../../filters.rst:222
msgid "Alternatively, we could compile the filter:"
msgstr ""

#: ../../filters.rst:229
msgid "Note that if the filter is placed in the system PATH, then the initial ``./`` is not needed. Note also that the command line can include multiple instances of ``--filter``: the filters will be applied in sequence."
msgstr ""

#: ../../filters.rst:235
msgid "LaTeX for WordPress"
msgstr ""

#: ../../filters.rst:237
msgid "Another easy example. WordPress blogs require a special format for LaTeX math. Instead of ``$e=mc^2$``, you need: ``$LaTeX e=mc^2$``. How can we convert a markdown document accordingly?"
msgstr ""

#: ../../filters.rst:241
msgid "Again, it’s difficult to do the job reliably with regexes. A ``$`` might be a regular currency indicator, or it might occur in a comment or code block or inline code span. We just want to find the ``$``\\ s that begin LaTeX math. If only we had a parser…"
msgstr ""

#: ../../filters.rst:246
msgid "We do. Pandoc already extracts LaTeX math, so:"
msgstr ""

#: ../../filters.rst:258
msgid "Mission accomplished. (I’ve omitted type signatures here, just to show it can be done.)"
msgstr ""

#: ../../filters.rst:262
msgid "But I don’t want to learn Haskell!"
msgstr ""

#: ../../filters.rst:264
msgid "While it’s easiest to write pandoc filters in Haskell, it is fairly easy to write them in python using the ``pandocfilters`` package. The package is in PyPI and can be installed using ``pip install pandocfilters`` or ``easy_install pandocfilters``."
msgstr ""

#: ../../filters.rst:269
msgid "Here’s our “beheading” filter in python:"
msgstr ""

#: ../../filters.rst:289
msgid "``toJSONFilter(behead)`` walks the AST and applies the ``behead`` action to each element. If ``behead`` returns nothing, the node is unchanged; if it returns an object, the node is replaced; if it returns a list, the new list is spliced in."
msgstr ""

#: ../../filters.rst:294
msgid "Note that, although these parameters are not used in this example, ``format`` provides access to the target format, and ``meta`` provides access to the document’s metadata."
msgstr ""

#: ../../filters.rst:298
msgid "There are many examples of python filters in `the pandocfilters repository`_."
msgstr ""

#: ../../filters.rst:301
msgid "For a more Pythonic alternative to pandocfilters, see the `panflute`_ library. Don’t like Python? There are also ports of pandocfilters in `PHP`_, `perl`_, `javascript/node.js`_, `Groovy`_, and `Ruby`_."
msgstr ""

#: ../../filters.rst:305
msgid "Starting with pandoc 2.0, pandoc includes built-in support for writing filters in lua. The lua interpreter is built in to pandoc, so a lua filter does not require any additional software to run. See the `documentation on lua filters`_."
msgstr ""

#: ../../filters.rst:311
msgid "Include files"
msgstr ""

#: ../../filters.rst:313
msgid "So none of our transforms have involved IO. How about a script that reads a markdown document, finds all the inline code blocks with attribute ``include``, and replaces their contents with the contents of the file given?"
msgstr ""

#: ../../filters.rst:337
msgid "Try this on the following:"
msgstr ""

#: ../../filters.rst:348
msgid "Removing links"
msgstr ""

#: ../../filters.rst:350
msgid "What if we want to remove every link from a document, retaining the link’s text?"
msgstr ""

#: ../../filters.rst:365
msgid "Note that ``delink`` can’t be a function of type ``Inline -> Inline``, because the thing we want to replace the link with is not a single ``Inline`` element, but a list of them. So we make ``delink`` a function from an ``Inline`` element to a list of ``Inline`` elements. ``toJSONFilter`` can still lift this function to a transformation of type ``Pandoc -> Pandoc``."
msgstr ""

#: ../../filters.rst:373
msgid "A filter for ruby text"
msgstr ""

#: ../../filters.rst:375
msgid "Finally, here’s a nice real-world example, developed on the `pandoc-discuss`_ list. Qubyte wrote:"
msgstr ""

#: ../../filters.rst:378
msgid "I’m interested in using pandoc to turn my markdown notes on Japanese into nicely set HTML and (Xe)LaTeX. With HTML5, ruby (typically used to phonetically read chinese characters by placing text above or to the side) is standard, and support from browsers is emerging (Webkit based browsers appear to fully support it). For those browsers that don’t support it yet (notably Firefox) the feature falls back in a nice way by placing the phonetic reading inside brackets to the side of each Chinese character, which is suitable for other output formats too. As for (Xe)LaTeX, ruby is not an issue."
msgstr ""

#: ../../filters.rst:388
msgid "At the moment, I use inline HTML to achieve the result when the conversion is to HTML, but it’s ugly and uses a lot of keystrokes, for example"
msgstr ""

#: ../../filters.rst:396
msgid "sets ご飯 “gohan” with “han” spelt phonetically above the second character, or to the right of it in brackets if the browser does not support ruby. I’d like to have something more like"
msgstr ""

#: ../../filters.rst:404
msgid "or any keystroke saving convention would be welcome."
msgstr ""

#: ../../filters.rst:406
msgid "We came up with the following script, which uses the convention that a markdown link with a URL beginning with a hyphen is interpreted as ruby:"
msgstr ""

#: ../../filters.rst:437
msgid "Note that, when a script is called using ``--filter``, pandoc passes it the target format as the first argument. When a function’s first argument is of type ``Maybe Format``, ``toJSONFilter`` will automatically assign it ``Just`` the target format or ``Nothing``."
msgstr ""

#: ../../filters.rst:442
msgid "We compile our script:"
msgstr ""

#: ../../filters.rst:448
msgid "Then run it:"
msgstr ""

#: ../../filters.rst:461
msgid "Note: to use this to generate PDFs via LaTeX, you’ll need to use ``--pdf-engine=xelatex``, specify a ``mainfont`` that has the Japanese characters (e.g. “Noto Sans CJK TC”), and add ``\\usepackage{ruby}`` to your template or header-includes."
msgstr ""

#: ../../filters.rst:467
msgid "Exercises"
msgstr ""

#: ../../filters.rst:469
msgid "Put all the regular text in a markdown document in ALL CAPS (without touching text in URLs or link titles)."
msgstr ""

#: ../../filters.rst:472
msgid "Remove all horizontal rules from a document."
msgstr ""

#: ../../filters.rst:474
msgid "Renumber all enumerated lists with roman numerals."
msgstr ""

#: ../../filters.rst:476
msgid "Replace each delimited code block with class ``dot`` with an image generated by running ``dot -Tpng`` (from graphviz) on the contents of the code block."
msgstr ""

#: ../../filters.rst:480
msgid "Find all code blocks with class ``python`` and run them using the python interpreter, printing the results to the console."
msgstr ""
